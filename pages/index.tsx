import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useRef, useState } from 'react'
import Webcam from 'react-webcam'
import styles from '../styles/Home.module.css'
import  Button  from './components/Button'
import {Cloudinary, CloudinaryImage} from '@cloudinary/url-gen';

const videoConstraints = {
  width: 720,
  height: 720,
  aspectRatio: 1
}

const FILTERS = ['al_dente', 'athena', 'audrey', 
                    'aurora', 'daguerre', 'eucalyptus',
                   'fes', 'frost', 'hairspray',
                    'hokusai', 'incognito', 'linen',
                   'peacock', 'primavera', 'quartz', 
                    'red_rock', 'refresh', 'sizzle', 'sonnet', 'ukulele', 'zorro'];


// Create your instance
const cloudinery = new Cloudinary({
  cloud: {
      cloudName: 'dx8lkxjh7'
  },
  url: {
      secure: true // force https, set to false to force http
  }
});


export default function Home() {
  const webcamRef = useRef<Webcam>(null);
  const [imageSrc, setImageSrc] = useState<string | undefined>();
  const [uploadedData, setUploadedData] = useState({public_id: ''});
  const [selectedFilter, setSelectedFilter] = useState('');

  const cloudImage = uploadedData?.public_id && cloudinery.image(uploadedData?.public_id);
  if (cloudImage){
    selectedFilter && 
    cloudImage.effect(`e_art:${selectedFilter}` as any)
  }
  const src  = (cloudImage && cloudImage.toURL() ) || imageSrc;
  
  const handleClick = () => {
    const image = webcamRef?.current?.getScreenshot();
    image && setImageSrc(image)
  }
  const handleReset = () => {
    setImageSrc(undefined)
  }

  const sampleCall = async () => {
    const res = await fetch('/api/cloudinary/upload', {
      method:'POST',
      body: JSON.stringify({
        image: imageSrc
      })
    }).then(r=> r.json());
    setUploadedData(res);
    console.log('response', res);
  }

  useEffect(()=>{
    if(!imageSrc) return;
    sampleCall();
  },[imageSrc])
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      

      <main className={styles.main}>
        <div><h1>Welcome To My  Webcam</h1></div>
        {src ?
          (
            <img src={src} alt="display"/>
          ):
          (
           <Webcam ref={webcamRef} mirrored videoConstraints={videoConstraints} width={300}/> 
          )}
       <Button
        text={'Capture'}
        color={'yellow'} 
        onClick={handleClick}/>
        <Button
        text={'Reset'} 
        color={'red'} 
        onClick={handleReset}/>
        <h2>Filters</h2>
        {FILTERS.map((item, index)=>(
          <div key={`filter-${index}`}>
            <button onClick={() => setSelectedFilter(item)}>
              <img width={100} height={100} src={cloudinery.image('Mountain_xxq3uv').effect(`e_art:${item}` as any).toURL()}/>
            </button><br/>
            <span>{item}</span>
          </div>
        ))}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}
